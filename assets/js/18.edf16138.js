(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{647:function(t,v,_){"use strict";_.r(v);var a=_(34),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"проєктування-системи"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#проєктування-системи"}},[t._v("#")]),t._v(" Проєктування системи")]),t._v(" "),_("h2",{attrs:{id:"restful-архітектура"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#restful-архітектура"}},[t._v("#")]),t._v(" RESTful архітектура")]),t._v(" "),_("p",[t._v("Додаток або архітектура вважається RESTful, якщо їй притаманні такі характеристики:")]),t._v(" "),_("ol",[_("li",[t._v("Стан та функціональність представлені у вигляді ресурсів – це означає, що кожен ресурс має бути доступним через звичайні HTTP-запити GET, POST, PUT або DELETE. Так, якщо хтось хоче отримати файл на сервері, у них має бути можливість відправити GET-запит та отримати файл. Якщо він хоче завантажити файл на сервер, то він повинен мати можливість використовувати POST або PUT-запит. Нарешті, якщо він хоче видалити файл, має бути можливість надіслати запит DELETE.")]),t._v(" "),_("li",[t._v("Архітектура клієнт-сервер, відсутність стану (stateless) та підтримка кешування:\n"),_("ul",[_("li",[t._v("Клієнт-сервер – звичайна архітектура, де сервером може бути веб-сервер, на якому розміщено програму, а клієнтом – звичайний веб-браузер;")]),t._v(" "),_("li",[t._v("Архітектура без збереження стану означає, що стан програми не зберігається у REST. Наприклад, якщо ви видалили ресурс з сервера командою DELETE, навіть при отриманні позитивного коду відповіді немає гарантій, що він дійсно був видалений. Щоб переконатися, що ресурс видалений, необхідно надіслати запит GET. З його допомогою можна запросити ресурси, щоб подивитися, чи є там віддалений.")])])])]),t._v(" "),_("h2",{attrs:{id:"принципи-та-обмеження-restful"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#принципи-та-обмеження-restful"}},[t._v("#")]),t._v(" Принципи та обмеження RESTful")]),t._v(" "),_("p",[t._v("Архітектура REST ґрунтується на кількох характеристиках, які описані нижче. Будь-який RESTful веб-сервіс повинен відповідати їм, щоб називатися таким. Ці характеристики також відомі як принципи проектування, які слід слідувати під час роботи з RESTful-сервісами.")]),t._v(" "),_("h3",{attrs:{id:"restful-клієнт-сервер"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#restful-клієнт-сервер"}},[t._v("#")]),t._v(" RESTful клієнт-сервер")]),t._v(" "),_("center",{staticStyle:{"border-radius":"4px",border:"1px solid #cfd7e6","box-shadow":"0 1px 3px 0 rgba(89,105,129,.05), 0 1px 1px 0 rgba(0,0,0,.025)",padding:"1em"}},[_("img",{attrs:{src:"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIe0qfd9cGM9UIKAoJcPgNabA4B5gKLbgKLSN10f1Lqxc8X3QbuAK3y0",alt:"uml diagram"}})]),t._v(" "),_("p",[t._v("Це найважливіша вимога REST-архітектури. Воно означає, що на сервері є RESTful веб-сервіс, який надає необхідну функціональність клієнту. При надсиланні клієнтом запиту до веб-сервісу сервер повинен або відхилити його, або прийняти та надати відповідну відповідь.")]),t._v(" "),_("h3",{attrs:{id:"відсутність-стану"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#відсутність-стану"}},[t._v("#")]),t._v(" Відсутність стану")]),t._v(" "),_("p",[t._v("Ця концепція означає, що завданням клієнта є переконатися, що серверу передаються всі необхідні дані. Це потрібно для того, щоб сервер міг скласти відповідь належним чином. Це проста незалежна послідовність запитань-відповідей. Клієнт ставить запитання, чи сервер відповідає відповідним чином. Потім клієнт ставить інше питання, проте сервер не пам'ятає, що було до цього, тому відповідає на нього незалежно.")]),t._v(" "),_("h3",{attrs:{id:"кеш"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#кеш"}},[t._v("#")]),t._v(" Кеш")]),t._v(" "),_("center",{staticStyle:{"border-radius":"4px",border:"1px solid #cfd7e6","box-shadow":"0 1px 3px 0 rgba(89,105,129,.05), 0 1px 1px 0 rgba(0,0,0,.025)",padding:"1em"}},[_("img",{attrs:{src:"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIe0qfd9cGM9UIKAoJcPgNabg4A9oHcfA2B5gKLbgKLSN1352hfsK3LW4iI5Ad18pKi1MW00",alt:"uml diagram"}})]),t._v(" "),_("p",[t._v("Концепція кеша допомагає нівелювати проблему відсутності стану. Оскільки кожен запит клієнта незалежний за своєю природою, часом клієнт може повторно надіслати будь-який запит. Запит прийде на сервер і сервер надішле відповідь. Це збільшує мережевий трафік. Кеш дозволяє клієнту зберігати раніше відправлені запити та відповіді. Тому при повторному надсиланні запиту він не буде відправлений серверу; натомість необхідні дані будуть взяті з кешу.")]),t._v(" "),_("h3",{attrs:{id:"багатошарова-система"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#багатошарова-система"}},[t._v("#")]),t._v(" Багатошарова система")]),t._v(" "),_("p",[t._v("Суть цієї концепції полягає в тому, що будь-який додатковий шар на кшталт проміжного (шар, в якому створюється бізнес-логіка; це може бути додатковий сервіс, з яким клієнт взаємодіє до сервера), можна помістити між клієнтом і сервером, на якому розташовується RESTful веб-сервіс. Однак цей шар повинен бути впроваджений прозоро, щоб він не порушив взаємодію клієнта та сервера.")]),t._v(" "),_("h2",{attrs:{id:"опис"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#опис"}},[t._v("#")]),t._v(" Опис")]),t._v(" "),_("p",[t._v("Для прикладу будемо створювати наступний API:")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("API")]),t._v(" "),_("th",[t._v("Опис")]),t._v(" "),_("th",[t._v("Тіло запиту")]),t._v(" "),_("th",[t._v("Тіло відповіді")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("GET /api/todo")]),t._v(" "),_("td",[t._v("Отримати всі елементи списку справ")]),t._v(" "),_("td",[t._v("Ні")]),t._v(" "),_("td",[t._v("Масив списку справ")])]),t._v(" "),_("tr",[_("td",[t._v("GET /api/todo/{id}")]),t._v(" "),_("td",[t._v("Отримати елемент за ідентифікатором")]),t._v(" "),_("td",[t._v("Ні")]),t._v(" "),_("td",[t._v("Елемент списку справ")])]),t._v(" "),_("tr",[_("td",[t._v("POST /api/todo")]),t._v(" "),_("td",[t._v("Додати новий елемент")]),t._v(" "),_("td",[t._v("Елемент списку справ")]),t._v(" "),_("td",[t._v("Елемент списку справ")])]),t._v(" "),_("tr",[_("td",[t._v("PUT /api/todo/{id}")]),t._v(" "),_("td",[t._v("Оновити існуючий елемент")]),t._v(" "),_("td",[t._v("Елемент списку справ")]),t._v(" "),_("td",[t._v("Ні")])]),t._v(" "),_("tr",[_("td",[t._v("PATCH /api/todo/{id}")]),t._v(" "),_("td",[t._v("Оновити існуючий елемент")]),t._v(" "),_("td",[t._v("Елемент списку справ")]),t._v(" "),_("td",[t._v("Ні")])]),t._v(" "),_("tr",[_("td",[t._v("DELETE /api/todo/{id}")]),t._v(" "),_("td",[t._v("Видалити елемент")]),t._v(" "),_("td",[t._v("Ні")]),t._v(" "),_("td",[t._v("Ні")])])])]),t._v(" "),_("p",[t._v("Архітектура додатку має наступний вигляд")]),t._v(" "),_("center",[_("img",{staticStyle:{width:"60%",margin:"1em 0","border-radius":"4px",border:"1px solid #cfd7e6","box-shadow":"0 1px 3px 0 rgba(89,105,129,.05), 0 1px 1px 0 rgba(0,0,0,.025)"},attrs:{src:"https://i.postimg.cc/vHLvd9cz/architecture.png"}})]),t._v(" "),_("ul",[_("li",[t._v("Клієнтом є програмне забезпечення, яке використовує веб-API (браузер, мобільний додаток та інше). У нашому випадку клієнт не створюється. Для тестування програми використовуватиметься Postman.")]),t._v(" "),_("li",[_("strong",[t._v("Модель")]),t._v(" – це об'єкт, який представляє дані у нашому додатку. У разі єдина модель — це елемент списку справ. Моделі представлені найпростішими класами C# (POCO).")]),t._v(" "),_("li",[_("strong",[t._v("Контролер")]),t._v(" — це об'єкт, який обробляє запит HTTP і створює відповідь HTTP. У цьому додатку один контролер.")]),t._v(" "),_("li",[t._v("Для простоти цього матеріалу для роботи програми не буде використовуватися база даних. Натомість елементи списку просто зберігаються у пам'яті. Проте рівень доступу до даних буде увімкнено, щоб показати роздільність веб-API та рівня даних")])])],1)}),[],!1,null,null,null);v.default=r.exports}}]);